#!/usr/bin/python3.8
import subprocess
import sys

dotest_path = '/home/housemen/OpenSource/LLVM/llvm-project/lldb/test/API/dotest.py'
dotest_args_str = ''
arch = 'arm'
executable = '/home/housemen/OpenSource/LLVM/arm-linux-gnueabihf8-clang/./bin/lldb'
compiler = '/home/housemen/OpenSource/LLVM/arm-linux-gnueabihf8-clang/./bin/clang'
dsymutil = '/home/housemen/OpenSource/LLVM/arm-linux-gnueabihf8-clang/./bin/dsymutil'
lldb_build_dir = '/home/housemen/OpenSource/LLVM/arm-linux-gnueabihf8-clang/lldb-test-build.noindex'
lldb_build_intel_pt = "0"
lldb_framework_dir = ""
lldb_libs_dir = "/home/housemen/OpenSource/LLVM/arm-linux-gnueabihf8-clang/./lib"
llvm_tools_dir = "/home/housemen/OpenSource/LLVM/arm-linux-gnueabihf8-clang/./bin"
has_libcxx = 0
libcxx_libs_dir = ""
libcxx_include_dir = ""
libcxx_include_target_dir = ""

if __name__ == '__main__':
    wrapper_args = sys.argv[1:]
    dotest_args = []
    # split on an empty string will produce [''] and if you
    # add that to the command, it will be treated as a directory...
    if len(dotest_args_str) > 0:
        dotest_args = dotest_args_str.split(';')
    # Build dotest.py command.
    cmd = [sys.executable, dotest_path]
    cmd.extend(['--arch', arch])
    cmd.extend(dotest_args)
    cmd.extend(['--build-dir', lldb_build_dir])
    cmd.extend(['--executable', executable])
    cmd.extend(['--compiler', compiler])
    cmd.extend(['--dsymutil', dsymutil])
    cmd.extend(['--lldb-libs-dir', lldb_libs_dir])
    cmd.extend(['--llvm-tools-dir', llvm_tools_dir])
    if has_libcxx:
        cmd.extend(['--libcxx-include-dir', libcxx_include_dir])
        if libcxx_include_target_dir:
            cmd.extend(['--libcxx-include-target-dir', libcxx_include_target_dir])
        cmd.extend(['--libcxx-library-dir', libcxx_libs_dir])
    if lldb_framework_dir:
        cmd.extend(['--framework', lldb_framework_dir])
    if lldb_build_intel_pt == "1":
        cmd.extend(['--enable-plugin', 'intel-pt'])
    cmd.extend(wrapper_args)
    # Invoke dotest.py and return exit code.
    print(' '.join(cmd))
    sys.exit(subprocess.call(cmd))
